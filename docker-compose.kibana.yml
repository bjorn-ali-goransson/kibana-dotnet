
services:
  setup:
    # reusing same image as elasticsearch, it wont use any resources because we have a custom command
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    # volumes:
    #   - certs:/usr/share/elasticsearch/config/certs
    depends_on:
      elasticsearch:
        condition: service_healthy
    user: "0"
    command: >
      bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST  -u "elastic:change_me" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"change_me\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    networks:
      - net
    # healthcheck:
    #   test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
    #   interval: 1s
    #   timeout: 5s
    #   retries: 120
  # Final storage: Elasticsearch
  elasticsearch:
    # depends_on:
    #   setup:
    #     condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - path.logs=/var/log/
      - cluster.name=elasticsearch
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTIC_PASSWORD=change_me
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
    ports:
      - 9200:9200
    healthcheck:
        test: 
          [
            "CMD-SHELL", 
            "curl -s -I http://localhost:9200/_cluster/health || exit 1"
          ]
        interval: 10s
        timeout: 10s
        retries: 120
    networks:
      - net

  # Kibana to display monitoring data
  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTIC_APM_ACTIVE=true
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=change_me
    ports:
      - 5601:5601
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - net

  # Kibana to display monitoring data
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.12.1
    container_name: apm-server
    ports:
      - 8200:8200
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E apm-server.kibana.protocol=http
         -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
         -E apm-server.kibana.username=elastic
         -E apm-server.kibana.password=change_me
         -E output.elasticsearch.username=elastic
         -E output.elasticsearch.password=change_me
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - net

# volumes:
#   certs:
#     driver: local

networks:
  net:
    driver: bridge
